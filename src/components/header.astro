---
import { Icon } from "astro-icon";

const navItems = [
  { title: "GITHUB", url: "https://github.com/odnoklassniki", external: true },
  { title: "Habr", url: "https://habr.com/ru/companies/odnoklassniki/articles/", external: true, },
  { title: "Вакансии", url: "https://spb.hh.ru/employer/15478", external: true },
  { title: "Тех радар", url: "/techradar" },
  { title: "О нас", url: "/about" },
  { title: "Контакты", url: "/contacts" },
];

const mobileNavItems = [
  {
    title: "Github ↗",
    url: "https://github.com/odnoklassniki",
    external: true,
  },
  {
    title: "Habr ↗",
    url: "https://habr.com/ru/companies/odnoklassniki/articles/",
    external: true,
  },
  {
    title: "Вакансии",
    url: "https://spb.hh.ru/employer/15478",
    external: true,
  },
  { title: "О нас", url: "/about" },
  { title: "Контакты", url: "/contacts" },
];

const { pathname } = Astro.url;
---

<header id="page-header">
  <a href="/">
    <h1 class="sr-only">OKTECH</h1>
    <img src="" />
    <Icon name="logomark" id="logo" class="icon" />
  </a>
  <div id="menu-modal" class="modal" aria-hidden="true">
    <div class="modal-content">
      <div class="space-y-4" role="dialog" aria-modal="true">
        <div class="modal-header">
          <a class="flex justify-center" href="/">
            <h2 class="sr-only">OKTECH</h2>
            <Icon name="logomark" class="icon" />
          </a>
          <button
            id="close-nav-button"
            type="button"
            id="open-nav-button"
            class="nav-btn text-button"
            aria-label="Close navigation"
          >
            закрыть
          </button>
        </div>
        <nav class="mobile-nav">
          <ul>
            {
              mobileNavItems.map(({ title, url, external }) => (
                <li
                  class={`${
                    pathname === `${url}/` || pathname === url ? "active" : ""
                  }`}
                >
                  <a href={url} target={external ? "_blank" : "_self"}>
                    {title}
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
      </div>
    </div>
  </div>
  <nav class="decktop-nav">
    <ul>
      {
        navItems.map(({ title, url, external }) => (
          <li
            class={`${
              pathname === `${url}/` || pathname === url ? "active" : ""
            }`}
          >
            <a
              class="text-button"
              href={url}
              target={external ? "_blank" : "_self"}
              data-pathname={pathname}
              data-url={url}
            >
              <div class="nav-btn">{title}</div>
            </a>
          </li>
        ))
      }
    </ul>
    <button
      id="open-nav-button"
      type="button"
      class="nav-btn text-button"
      aria-label="Navigation"
    >
      меню
    </button>
  </nav>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>

<style lang="scss">
  @import "../styles/global.scss";

  header {
    display: flex;
    position: fixed;
    top: 0;
    z-index: 20;
    width: 100%;
    align-items: center;
    justify-content: space-between;
    padding: 16px;
    color: white;
  }

  .modal {
    display: none;
    z-index: 30;
    &.is-open {
      display: block;
    }
    &-content {
      position: fixed;
      inset: 0px;
      background-color: black;
      padding: 16px;
    }
    &-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
  }

  .decktop-nav {
    ul {
      display: none;
    }

    li.active {
      .nav-btn {
        background-color: black;
      }
    }
  }

  .mobile-nav {
    ul {
      display: flex;
      flex-direction: column;

      a {
        display: block;
        font-size: 60px;
      }

      li.active {
        color: $c-accent;
      }
    }
  }

  .icon {
    height: 32px;
  }

  .nav-btn {
    position: relative;
    display: flex;
    height: 32px;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    border-radius: 64px;
    background-color: rgba(44, 44, 44, 0.4);
    padding: 24px;
    backdrop-filter: blur(12px);

    &:hover {
      background-color: rgba(44, 44, 44, 0.5);
    }
  }

  @include desktop {
    .decktop-nav ul {
      display: flex;
      column-gap: 8px;
    }

    #open-nav-button {
      display: none;
    }
  }
</style>
